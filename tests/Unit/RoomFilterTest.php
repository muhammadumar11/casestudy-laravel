<?php

namespace Tests\Unit;

use App\Models\Advertiser;
use App\Models\Hotel;
use App\Models\Room;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;

class RoomFilterTest extends TestCase
{

    use DatabaseTransactions;

    const URL = 'api/rooms';

    protected $hotelId;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->prepareDataForTest();
    }

    /**
     * @test
     *
     * A test to confirm Cheap to High rates
     *
     * @return void
     */
    public function test_rooms_are_sorted_cheap_to_high_rate()
    {
        $this->hotelId = Hotel::first()->id;

        // param
        $queryParams = [
            'hotel_id' => $this->hotelId,
        ];

        // hit EP
        $response = $this->json('GET',
        self::URL,
            $queryParams
        );

        $responseRooms = json_decode($response->content());

        $prices = [];
        foreach ($responseRooms->data as $datum) {
            $prices[] = $datum->total_price;
        }

        $sortedPrices = array_values($prices);
        sort($sortedPrices);


        $this->assertTrue($prices === $sortedPrices, "Rooms are not sorted ASC to DESC");
    }

    public function prepareDataForTest()
    {
        Advertiser::factory()->count(2)->make();

        foreach (Advertiser::all() as $advertiser) {
            Hotel::factory()->count(3)->create([
                'advertiser_id' => $advertiser->id,
            ]);
        }

        foreach (Hotel::all() as $hotel) {
            Room::factory()->count(3)->create([
                'hotel_id' => $hotel->id,
            ]);
        }
    }
}
